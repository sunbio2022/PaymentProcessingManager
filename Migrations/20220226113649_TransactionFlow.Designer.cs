// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentProcessingManager.DBContexts;

namespace PaymentProcessingManager.Migrations
{
    [DbContext(typeof(MyDBContext))]
    [Migration("20220226113649_TransactionFlow")]
    partial class TransactionFlow
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("PaymentProcessingManager.Model.Acquisition", b =>
                {
                    b.Property<int>("AcquisitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Acquisitions")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("Authorization")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorizeStatusID")
                        .HasColumnType("int");

                    b.Property<string>("BURS")
                        .HasColumnType("text");

                    b.Property<string>("BURSNotes")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("text");

                    b.Property<int?>("PostData")
                        .HasColumnType("int");

                    b.Property<int?>("PostPayment")
                        .HasColumnType("int");

                    b.Property<int?>("Reconsilation")
                        .HasColumnType("int");

                    b.Property<int?>("Routing")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceRegistryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TransactionID")
                        .HasColumnType("text");

                    b.HasKey("AcquisitionID");

                    b.HasIndex("AuthorizeStatusID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("ServiceRegistryID");

                    b.ToTable("Acquisition");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.AuthorizeStatus", b =>
                {
                    b.Property<int>("AuthorizeStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AuthorizeStatusName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("AuthorizeStatusID");

                    b.ToTable("AuthorizeStatus");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<string>("CustomerAccount")
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .HasColumnType("text");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.PaymentGateway", b =>
                {
                    b.Property<int>("PaymentGatewayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentGatewayName")
                        .HasColumnType("text");

                    b.HasKey("PaymentGatewayID");

                    b.ToTable("PaymentGateway");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.ServiceRegistry", b =>
                {
                    b.Property<int>("ServiceRegistryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FolderPath")
                        .HasColumnType("text");

                    b.Property<string>("MerchantID")
                        .HasColumnType("text");

                    b.Property<int?>("PaymentGatewayID")
                        .HasColumnType("int");

                    b.HasKey("ServiceRegistryID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PaymentGatewayID");

                    b.ToTable("ServiceRegistry");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("TransactionID")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.Acquisition", b =>
                {
                    b.HasOne("PaymentProcessingManager.Model.AuthorizeStatus", "AuthorizeStatus")
                        .WithMany()
                        .HasForeignKey("AuthorizeStatusID");

                    b.HasOne("PaymentProcessingManager.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("PaymentProcessingManager.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("PaymentProcessingManager.Model.ServiceRegistry", "ServiceRegistry")
                        .WithMany()
                        .HasForeignKey("ServiceRegistryID");

                    b.Navigation("AuthorizeStatus");

                    b.Navigation("Customer");

                    b.Navigation("Department");

                    b.Navigation("ServiceRegistry");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.ServiceRegistry", b =>
                {
                    b.HasOne("PaymentProcessingManager.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("PaymentProcessingManager.Model.PaymentGateway", "PaymentGateway")
                        .WithMany()
                        .HasForeignKey("PaymentGatewayID");

                    b.Navigation("Department");

                    b.Navigation("PaymentGateway");
                });

            modelBuilder.Entity("PaymentProcessingManager.Model.User", b =>
                {
                    b.HasOne("PaymentProcessingManager.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentID");

                    b.HasOne("PaymentProcessingManager.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.Navigation("Department");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
